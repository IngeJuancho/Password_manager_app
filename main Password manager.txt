// Imports (sin cambios)
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:local_auth/local_auth.dart';
import 'package:crypto/crypto.dart';
import 'dart:convert';
import 'dart:math';
import 'dart:io';
import 'package:file_picker/file_picker.dart';
import 'package:google_fonts/google_fonts.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Gestor de Contraseñas',
      theme: ThemeData(
        primarySwatch: Colors.blue,
        useMaterial3: true,
        textTheme: GoogleFonts.interTextTheme(
          Theme.of(context).textTheme,
        ),
      ),
      home: AuthScreen(),
    );
  }
}

// --- INICIO: AuthScreen ACTUALIZADA ---
// Se reemplazó la clase anterior con la nueva versión que proporcionaste.

class AuthScreen extends StatefulWidget {
  const AuthScreen({super.key});

  @override
  _AuthScreenState createState() => _AuthScreenState();
}

class _AuthScreenState extends State<AuthScreen> with TickerProviderStateMixin {
  final LocalAuthentication auth = LocalAuthentication();
  bool _isAuthenticating = false;
  String _authStatus = 'Esperando autenticación...';
  
  // Variable de estado para controlar la animación del candado
  bool _isUnlocked = false;
  
  // Controlador para animaciones adicionales
  late AnimationController _bounceController;
  late Animation<double> _bounceAnimation;

  @override
  void initState() {
    super.initState();
    
    // Inicializar controlador de animación de rebote
    _bounceController = AnimationController(
      duration: const Duration(milliseconds: 600),
      vsync: this,
    );
    
    _bounceAnimation = Tween<double>(
      begin: 1.0,
      end: 1.2,
    ).animate(CurvedAnimation(
      parent: _bounceController,
      curve: Curves.elasticOut,
    ));
    
    _authenticateWithBiometrics();
  }

  @override
  void dispose() {
    _bounceController.dispose();
    super.dispose();
  }

  Future<void> _authenticateWithBiometrics() async {
    setState(() {
      _isAuthenticating = true;
      _authStatus = 'Autenticando...';
      _isUnlocked = false; // Asegurar que el candado esté cerrado
    });
    
    try {
      final bool didAuthenticate = await auth.authenticate(
        localizedReason: 'Autentícate para acceder a tus contraseñas',
        options: AuthenticationOptions(
          biometricOnly: false,
          stickyAuth: true,
        ),
      );

      if (didAuthenticate) {
        // 1. Cambiar estado para activar animación de desbloqueo
        setState(() {
          _isUnlocked = true;
          _authStatus = '¡Acceso concedido!';
          _isAuthenticating = false;
        });

        // 2. Activar animación de rebote
        _bounceController.forward();

        // 3. Pausa para ver la animación antes de navegar
        await Future.delayed(const Duration(milliseconds: 1200));
        _navigateToHome();

      } else {
        setState(() {
          _isAuthenticating = false;
          _authStatus = 'Autenticación fallida. Intenta nuevamente.';
          _isUnlocked = false; // Mantener el candado cerrado
        });
      }
    } catch (e) {
      setState(() {
        _isAuthenticating = false;
        _authStatus = 'Error de autenticación. Intenta nuevamente.';
        _isUnlocked = false; // Mantener el candado cerrado en caso de error
      });
    }
  }

  void _navigateToHome() {
    if (!mounted) return;
    Navigator.pushReplacement(
      context,
      // Transición suave a la siguiente pantalla
      PageRouteBuilder(
        pageBuilder: (context, animation, secondaryAnimation) => PasswordManagerHome(),
        transitionsBuilder: (context, animation, secondaryAnimation, child) {
          return FadeTransition(opacity: animation, child: child);
        },
        transitionDuration: const Duration(milliseconds: 500),
      )
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topLeft,
            end: Alignment.bottomRight,
            colors: [Colors.blue[800]!, Colors.blue[400]!],
          ),
        ),
        child: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              // Widget de animación del candado con efecto de rebote
              AnimatedBuilder(
                animation: _bounceAnimation,
                builder: (context, child) {
                  return Transform.scale(
                    scale: _bounceAnimation.value,
                    child: AnimatedSwitcher(
                      duration: const Duration(milliseconds: 500),
                      transitionBuilder: (Widget child, Animation<double> animation) {
                        return ScaleTransition(
                          scale: animation,
                          child: RotationTransition(
                            turns: Tween<double>(
                              begin: 0.0,
                              end: _isUnlocked ? 0.1 : 0.0,
                            ).animate(animation),
                            child: child,
                          ),
                        );
                      },
                      child: Icon(
                        _isUnlocked ? Icons.lock_open : Icons.lock_outline,
                        key: ValueKey<bool>(_isUnlocked),
                        size: 120,
                        color: _isUnlocked ? Colors.lightGreenAccent : Colors.white,
                      ),
                    ),
                  );
                },
              ),
              
              // Animación adicional de partículas de éxito (opcional)
              if (_isUnlocked) ...[
                SizedBox(height: 10),
                TweenAnimationBuilder<double>(
                  tween: Tween<double>(begin: 0.0, end: 1.0),
                  duration: const Duration(milliseconds: 800),
                  builder: (context, value, child) {
                    return Opacity(
                      opacity: value,
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Icon(Icons.check_circle, color: Colors.lightGreenAccent, size: 30),
                          SizedBox(width: 10),
                          Icon(Icons.security, color: Colors.lightGreenAccent, size: 25),
                          SizedBox(width: 10),
                          Icon(Icons.check_circle, color: Colors.lightGreenAccent, size: 30),
                        ],
                      ),
                    );
                  },
                ),
              ],
              
              SizedBox(height: 30),
              Text(
                'Gestor de Contraseñas',
                style: GoogleFonts.inter(
                  fontSize: 28,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
                textAlign: TextAlign.center,
              ),
              SizedBox(height: 50),
              
              // Contenedor del estado con animación de color
              AnimatedContainer(
                duration: const Duration(milliseconds: 300),
                padding: EdgeInsets.symmetric(horizontal: 20, vertical: 10),
                decoration: BoxDecoration(
                  color: _isUnlocked 
                      ? Colors.green.withOpacity(0.2)
                      : Colors.white.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(10),
                  border: _isUnlocked 
                      ? Border.all(color: Colors.lightGreenAccent, width: 1)
                      : null,
                ),
                child: Row(
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    if (_isUnlocked) ...[
                      Icon(Icons.check_circle, color: Colors.lightGreenAccent, size: 20),
                      SizedBox(width: 8),
                    ],
                    Text(
                      _authStatus,
                      style: TextStyle(
                        color: _isUnlocked ? Colors.lightGreenAccent : Colors.white, 
                        fontSize: 16,
                        fontWeight: _isUnlocked ? FontWeight.bold : FontWeight.normal,
                      ),
                      textAlign: TextAlign.center,
                    ),
                  ],
                ),
              ),
              
              SizedBox(height: 30),
              
              // Ocultar indicadores y botón si la autenticación fue exitosa
              if (!_isUnlocked) ...[
                if (_isAuthenticating)
                  Column(
                    children: [
                      CircularProgressIndicator(
                        color: Colors.white,
                        strokeWidth: 3,
                      ),
                      SizedBox(height: 15),
                      Text(
                        'Verificando identidad...',
                        style: TextStyle(
                          color: Colors.white70,
                          fontSize: 14,
                        ),
                      ),
                    ],
                  )
                else
                  ElevatedButton.icon(
                    onPressed: _authenticateWithBiometrics,
                    icon: Icon(Icons.fingerprint, size: 24),
                    label: Text('Autenticarse', style: TextStyle(fontSize: 16)),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.white,
                      foregroundColor: Colors.blue[800],
                      padding: EdgeInsets.symmetric(horizontal: 40, vertical: 15),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(30),
                      ),
                      elevation: 5,
                    ),
                  ),
              ] else ...[
                // Mensaje de carga mientras navega
                Column(
                  children: [
                    SizedBox(
                      width: 30,
                      height: 30,
                      child: CircularProgressIndicator(
                        color: Colors.lightGreenAccent,
                        strokeWidth: 3,
                      ),
                    ),
                    SizedBox(height: 15),
                    Text(
                      'Accediendo...',
                      style: TextStyle(
                        color: Colors.lightGreenAccent,
                        fontSize: 14,
                        fontWeight: FontWeight.w500,
                      ),
                    ),
                  ],
                ),
              ],
            ],
          ),
        ),
      ),
    );
  }
}

// --- FIN DE AuthScreen ACTUALIZADA ---


// --- CÓDIGO ORIGINAL SIN CAMBIOS ---

class PasswordEntry {
  String app;
  String password;
  DateTime createdAt;
  DateTime? lastModified;

  PasswordEntry({
    required this.app,
    required this.password,
    required this.createdAt,
    this.lastModified,
  });

  Map<String, dynamic> toJson() {
    return {
      'app': app,
      'password': password,
      'createdAt': createdAt.toIso8601String(),
      'lastModified': lastModified?.toIso8601String(),
    };
  }

  factory PasswordEntry.fromJson(Map<String, dynamic> json) {
    return PasswordEntry(
      app: json['app'],
      password: json['password'],
      createdAt: DateTime.parse(json['createdAt']),
      lastModified: json['lastModified'] != null
          ? DateTime.parse(json['lastModified'])
          : null,
    );
  }
}

enum PasswordStrength {
  muyDebil,
  debil,
  media,
  fuerte,
  muyFuerte
}

class PasswordStrengthAnalyzer {
  static PasswordStrength analyzePassword(String password) {
    if (password.isEmpty) return PasswordStrength.muyDebil;
    
    int score = 0;
    
    // Longitud
    if (password.length >= 8) score += 1;
    if (password.length >= 12) score += 1;
    if (password.length >= 16) score += 1;
    
    // Caracteres en mayúsculas
    if (password.contains(RegExp(r'[A-Z]'))) score += 1;
    
    // Caracteres en minúsculas
    if (password.contains(RegExp(r'[a-z]'))) score += 1;
    
    // Números
    if (password.contains(RegExp(r'[0-9]'))) score += 1;
    
    // Símbolos especiales
    if (password.contains(RegExp(r'[!@#$%^&*()_+\-=\[\]{}|;:,.<>?]'))) score += 1;
    
    // Caracteres especiales adicionales
    if (password.contains(RegExp(r'[~`]'))) score += 1;
    
    // Penalización por patrones comunes
    if (password.contains(RegExp(r'(.)\1{2,}'))) score -= 1; // Caracteres repetidos
    if (password.contains(RegExp(r'(123|abc|qwe|asd|zxc)'))) score -= 1; // Secuencias comunes
    
    // Penalización por contraseñas muy comunes
    List<String> commonPasswords = ['password', '123456', '123456789', 'qwerty', 'abc123'];
    if (commonPasswords.contains(password.toLowerCase())) score -= 2;
    
    if (score <= 1) return PasswordStrength.muyDebil;
    if (score <= 2) return PasswordStrength.debil;
    if (score <= 4) return PasswordStrength.media;
    if (score <= 6) return PasswordStrength.fuerte;
    return PasswordStrength.muyFuerte;
  }
  
  static String getStrengthText(PasswordStrength strength) {
    switch (strength) {
      case PasswordStrength.muyDebil:
        return 'Muy Débil';
      case PasswordStrength.debil:
        return 'Débil';
      case PasswordStrength.media:
        return 'Media';
      case PasswordStrength.fuerte:
        return 'Fuerte';
      case PasswordStrength.muyFuerte:
        return 'Muy Fuerte';
    }
  }
  
  static Color getStrengthColor(PasswordStrength strength) {
    switch (strength) {
      case PasswordStrength.muyDebil:
        return Colors.red;
      case PasswordStrength.debil:
        return Colors.orange;
      case PasswordStrength.media:
        return Colors.yellow[700]!;
      case PasswordStrength.fuerte:
        return Colors.lightGreen;
      case PasswordStrength.muyFuerte:
        return Colors.green;
    }
  }
  
  static IconData getStrengthIcon(PasswordStrength strength) {
    switch (strength) {
      case PasswordStrength.muyDebil:
        return Icons.warning;
      case PasswordStrength.debil:
        return Icons.warning_amber;
      case PasswordStrength.media:
        return Icons.info;
      case PasswordStrength.fuerte:
        return Icons.check_circle;
      case PasswordStrength.muyFuerte:
        return Icons.verified;
    }
  }
}

class PasswordManagerHome extends StatefulWidget {
  const PasswordManagerHome({super.key});

  @override
  _PasswordManagerHomeState createState() => _PasswordManagerHomeState();
}

class _PasswordManagerHomeState extends State<PasswordManagerHome> {
  Map<String, PasswordEntry> _passwords = {};
  final Set<String> _visiblePasswords = {};
  List<String> _filteredApps = [];
  final TextEditingController _appController = TextEditingController();
  final TextEditingController _passwordController = TextEditingController();
  final TextEditingController _searchController = TextEditingController();
  final FocusNode _passwordFocusNode = FocusNode();
  String? _editingApp;
  
  // Variable de estado para controlar la visibilidad del campo de texto
  bool _isPasswordObscured = true;
  
  // Variables para el tema
  bool _isDarkMode = false;

  static const String _storageKey = 'encrypted_passwords';
  static const String _encryptionKey = 'my_secure_key_2024';
  static const String _themeKey = 'is_dark_mode';

  @override
  void initState() {
    super.initState();
    _loadPasswords();
    _loadThemePreference();
    _searchController.addListener(_filterPasswords);
  }

  @override
  void dispose() {
    _appController.dispose();
    _passwordController.dispose();
    _searchController.dispose();
    _passwordFocusNode.dispose();
    super.dispose();
  }

  void _filterPasswords() {
    final query = _searchController.text.toLowerCase();
    setState(() {
      if (query.isEmpty) {
        _filteredApps = _passwords.keys.toList();
      } else {
        _filteredApps = _passwords.keys
            .where((app) => _passwords[app]!.app.toLowerCase().contains(query))
            .toList();
      }
      _filteredApps.sort((a, b) => a.compareTo(b));
    });
  }

  Future<void> _loadPasswords() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final passwordsData = prefs.getString(_storageKey);
      
      if (passwordsData != null) {
        final decryptedData = _decrypt(passwordsData);
        final Map<String, dynamic> passwordsMap = json.decode(decryptedData);
        
        if (mounted) {
          setState(() {
            _passwords = Map.from(passwordsMap.map((key, value) =>
              MapEntry(key, PasswordEntry.fromJson(value))
            ));
            _filterPasswords();
          });
        }
      }
    } catch (e) {
      if (mounted) {
        _showSnackBar('Error al cargar las contraseñas', Colors.red);
      }
    }
  }

  Future<void> _loadThemePreference() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      setState(() {
        _isDarkMode = prefs.getBool(_themeKey) ?? false;
      });
    } catch (e) {
      // Si hay error, usar tema claro por defecto
      setState(() {
        _isDarkMode = false;
      });
    }
  }

  Future<void> _saveThemePreference() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setBool(_themeKey, _isDarkMode);
    } catch (e) {
      _showSnackBar('Error al guardar preferencia de tema', Colors.red);
    }
  }

  void _toggleTheme() {
    setState(() {
      _isDarkMode = !_isDarkMode;
    });
    _saveThemePreference();
  }

  Future<void> _savePasswords() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final passwordsMap = _passwords.map(
        (key, value) => MapEntry(key, value.toJson())
      );
      
      final jsonString = json.encode(passwordsMap);
      final encryptedData = _encrypt(jsonString);
      
      await prefs.setString(_storageKey, encryptedData);
    } catch (e) {
      _showSnackBar('Error al guardar las contraseñas', Colors.red);
    }
  }

  String _encrypt(String data) {
    final bytes = utf8.encode(data);
    final key = utf8.encode(_encryptionKey);
    final hmac = Hmac(sha256, key);
    final digest = hmac.convert(bytes);
    final encrypted = base64.encode(bytes);
    return '$encrypted.${digest.toString()}';
  }

  String _decrypt(String encryptedData) {
    final parts = encryptedData.split('.');
    if (parts.length != 2) throw Exception('Datos inválidos');
    
    final bytes = base64.decode(parts[0]);
    return utf8.decode(bytes);
  }

  String _generatePassword({
    int length = 16,
    bool includeUppercase = true,
    bool includeLowercase = true,
    bool includeNumbers = true,
    bool includeSymbols = true,
  }) {
    String charset = '';
    
    if (includeUppercase) charset += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    if (includeLowercase) charset += 'abcdefghijklmnopqrstuvwxyz';
    if (includeNumbers) charset += '0123456789';
    if (includeSymbols) charset += r'!@#$%^&*()_+-=[]{}|;:,.<>?';
    
    if (charset.isEmpty) return '';
    
    Random random = Random.secure();
    return List.generate(length, (index) => charset[random.nextInt(charset.length)]).join();
  }

  void _showPasswordGenerator() {
    int length = 16;
    bool includeUppercase = true;
    bool includeLowercase = true;
    bool includeNumbers = true;
    bool includeSymbols = true;
    String generatedPassword = '';

    showDialog(
      context: context,
      builder: (context) => StatefulBuilder(
        builder: (context, setDialogState) => AlertDialog(
          title: Text('Generador de Contraseñas'),
          content: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Row(
                  children: [
                    Text('Longitud: '),
                    Expanded(
                      child: Slider(
                        value: length.toDouble(),
                        min: 8,
                        max: 32,
                        divisions: 24,
                        label: length.toString(),
                        onChanged: (value) {
                          setDialogState(() => length = value.toInt());
                        },
                      ),
                    ),
                  ],
                ),
                CheckboxListTile(
                  title: Text('Mayúsculas (A-Z)'),
                  value: includeUppercase,
                  onChanged: (value) => setDialogState(() => includeUppercase = value!),
                ),
                CheckboxListTile(
                  title: Text('Minúsculas (a-z)'),
                  value: includeLowercase,
                  onChanged: (value) => setDialogState(() => includeLowercase = value!),
                ),
                CheckboxListTile(
                  title: Text('Números (0-9)'),
                  value: includeNumbers,
                  onChanged: (value) => setDialogState(() => includeNumbers = value!),
                ),
                CheckboxListTile(
                  title: Text('Símbolos (!@#)'),
                  value: includeSymbols,
                  onChanged: (value) => setDialogState(() => includeSymbols = value!),
                ),
                SizedBox(height: 20),
                ElevatedButton(
                  onPressed: () {
                    setDialogState(() {
                      generatedPassword = _generatePassword(
                        length: length,
                        includeUppercase: includeUppercase,
                        includeLowercase: includeLowercase,
                        includeNumbers: includeNumbers,
                        includeSymbols: includeSymbols,
                      );
                    });
                  },
                  child: Text('Generar Nueva'),
                ),
                if (generatedPassword.isNotEmpty) ...[
                  SizedBox(height: 10),
                  Container(
                    padding: EdgeInsets.all(10),
                    decoration: BoxDecoration(
                      color: Colors.grey[200],
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: SelectableText(
                      generatedPassword,
                      style: GoogleFonts.sourceCodePro(),
                    ),
                  ),
                ],
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: Text('Cancelar'),
            ),
            if (generatedPassword.isNotEmpty)
              TextButton(
                onPressed: () {
                  _passwordController.text = generatedPassword;
                  Navigator.pop(context);
                },
                child: Text('Usar Contraseña'),
              ),
          ],
        ),
      ),
    );
  }

  void _showLoadingIndicator(String message) {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        content: Row(
          children: [
            CircularProgressIndicator(),
            SizedBox(width: 20),
            Text(message),
          ],
        ),
      ),
    );
  }
  
  Future<void> _exportPasswords() async {
    _showLoadingIndicator('Preparando exportación...');
    try {
      final passwordsMap = _passwords.map((key, value) => 
        MapEntry(key, value.toJson())
      );
      
      final jsonString = json.encode(passwordsMap);
      final timestamp = DateTime.now().millisecondsSinceEpoch;
      final fileName = 'passwords_backup_$timestamp.json';
      
      final bytes = utf8.encode(jsonString);

      String? outputFile = await FilePicker.platform.saveFile(
        dialogTitle: 'Por favor, selecciona dónde guardar el backup:',
        fileName: fileName,
        bytes: bytes,
      );

      if (mounted) Navigator.pop(context); 

      if (outputFile != null) {
        _showSnackBar('Backup exportado exitosamente!', Colors.green);
      } else {
        _showSnackBar('Exportación cancelada por el usuario.', Colors.orange);
      }

    } catch (e) {
      if (mounted) Navigator.pop(context);
      _showSnackBar('Error al exportar: ${e.toString()}', Colors.red);
    }
  }

  Future<void> _importPasswords() async {
    try {
      FilePickerResult? result = await FilePicker.platform.pickFiles(
        type: FileType.custom,
        allowedExtensions: ['json'],
        dialogTitle: 'Seleccionar archivo de backup',
      );
      
      if (result != null && result.files.single.path != null) {
        _showLoadingIndicator('Importando...');
        final file = File(result.files.single.path!);
        final contents = await file.readAsString();
        
        final Map<String, dynamic> passwordsMap = json.decode(contents);
        
        Map<String, PasswordEntry> newPasswords = {};
        passwordsMap.forEach((key, value) {
          try {
            newPasswords[key] = PasswordEntry.fromJson(value);
          } catch (e) {
            throw Exception('Formato de archivo inválido');
          }
        });
        
        bool? shouldImport = await showDialog<bool>(
          context: context,
          builder: (context) => AlertDialog(
            title: Text('Confirmar importación'),
            content: Text('Se encontraron ${newPasswords.length} contraseñas. ¿Deseas importarlas? Esto reemplazará todas las contraseñas actuales.'),
            actions: [
              TextButton(onPressed: () => Navigator.pop(context, false), child: Text('Cancelar')),
              TextButton(onPressed: () => Navigator.pop(context, true), child: Text('Importar')),
            ],
          ),
        );
        
        if (shouldImport == true) {
          setState(() {
            _passwords = newPasswords;
            _filterPasswords();
          });
          
          await _savePasswords();
          _showSnackBar('${newPasswords.length} contraseñas importadas correctamente', Colors.green);
        }
      }
    } catch (e) {
      _showSnackBar('Error al importar: ${e.toString()}', Colors.red);
    } finally {
      if (mounted && Navigator.canPop(context)) {
        Navigator.pop(context);
      }
    }
  }

  void _savePassword() async {
    String app = _appController.text.trim();
    String password = _passwordController.text.trim();
    
    if (app.isEmpty || password.isEmpty) {
      _showSnackBar('Por favor, completa todos los campos', Colors.red);
      return;
    }
    
    DateTime now = DateTime.now();
    String appKey = app.toLowerCase();
    
    setState(() {
      if (_editingApp != null) {
        String oldKey = _editingApp!.toLowerCase();
        if (oldKey != appKey) {
            _passwords.remove(oldKey);
        }
        _passwords[appKey] = PasswordEntry(
          app: app,
          password: password,
          createdAt: _passwords[oldKey]?.createdAt ?? now,
          lastModified: now,
        );
      } else {
        _passwords[appKey] = PasswordEntry(
          app: app,
          password: password,
          createdAt: now,
        );
      }
      _editingApp = null;
      _filterPasswords();
    });
    
    _appController.clear();
    _passwordController.clear();
    FocusScope.of(context).unfocus();
    
    await _savePasswords();
    _showSnackBar('Contraseña guardada exitosamente', Colors.green);
  }

  void _editPassword(String appKey) {
    setState(() {
      _editingApp = appKey;
      _appController.text = _passwords[appKey]!.app;
      _passwordController.text = _passwords[appKey]!.password;
      _passwordFocusNode.requestFocus();
    });
  }

  void _cancelEdit() {
    setState(() {
      _editingApp = null;
      _appController.clear();
      _passwordController.clear();
      FocusScope.of(context).unfocus();
    });
  }

  void _deletePassword(String appKey) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Confirmar eliminación'),
          content: Text('¿Estás seguro de que quieres eliminar la contraseña de "${_passwords[appKey]!.app}"?'),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: Text('Cancelar'),
            ),
            TextButton(
              onPressed: () async {
                setState(() {
                  _passwords.remove(appKey);
                  _visiblePasswords.remove(appKey);
                  _filterPasswords();
                });
                await _savePasswords();
                Navigator.of(context).pop();
                _showSnackBar('Contraseña eliminada', Colors.orange);
              },
              child: Text('Eliminar', style: TextStyle(color: Colors.red)),
            ),
          ],
        );
      },
    );
  }

  void _togglePasswordVisibility(String appKey) {
    setState(() {
      if (_visiblePasswords.contains(appKey)) {
        _visiblePasswords.remove(appKey);
      } else {
        _visiblePasswords.add(appKey);
      }
    });
  }

  void _copyPassword(String password) {
    Clipboard.setData(ClipboardData(text: password));
    _showSnackBar('Contraseña copiada al portapapeles', Colors.blue);
  }

  void _showSnackBar(String message, Color color) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: color,
        duration: Duration(seconds: 3),
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
      ),
    );
  }

  String _formatDate(DateTime date) {
    return '${date.day}/${date.month}/${date.year}';
  }

  Widget _getAvatar(String appName) {
    final String initials = appName.isNotEmpty ? appName.substring(0, 1).toUpperCase() : '?';
    final Color color = Colors.primaries[appName.hashCode % Colors.primaries.length].shade100;
    final Color textColor = Colors.primaries[appName.hashCode % Colors.primaries.length].shade700;
    
    return CircleAvatar(
      backgroundColor: color,
      child: Text(
        initials,
        style: TextStyle(color: textColor, fontWeight: FontWeight.bold),
      ),
    );
  }

  Widget _buildPasswordStrengthIndicator(String password) {
    final strength = PasswordStrengthAnalyzer.analyzePassword(password);
    final color = PasswordStrengthAnalyzer.getStrengthColor(strength);
    final text = PasswordStrengthAnalyzer.getStrengthText(strength);
    final icon = PasswordStrengthAnalyzer.getStrengthIcon(strength);
    
    return Container(
      padding: EdgeInsets.symmetric(horizontal: 12, vertical: 6),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(20),
        border: Border.all(color: color.withOpacity(0.3), width: 1),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(icon, size: 16, color: color),
          SizedBox(width: 6),
          Text(
            text,
            style: TextStyle(
              color: color,
              fontSize: 12,
              fontWeight: FontWeight.w600,
            ),
          ),
        ],
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Theme(
      data: _isDarkMode ? ThemeData.dark() : ThemeData.light(),
      child: Scaffold(
      backgroundColor: _isDarkMode ? Colors.grey[900] : Colors.grey[100],
      appBar: AppBar(
        title: Text('Mis Contraseñas', style: GoogleFonts.inter(fontWeight: FontWeight.bold, color: Colors.white)),
        backgroundColor: Colors.blue[700],
        foregroundColor: Colors.white,
        actions: [
          IconButton(
            icon: Icon(_isDarkMode ? Icons.light_mode : Icons.dark_mode),
            onPressed: _toggleTheme,
            tooltip: _isDarkMode ? 'Modo Claro' : 'Modo Oscuro',
          ),
          PopupMenuButton(
            icon: Icon(Icons.more_vert),
            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
            itemBuilder: (context) => [
              PopupMenuItem(
                value: 'export',
                child: ListTile(leading: Icon(Icons.file_upload_outlined, color: Colors.green), title: Text('Exportar')),
              ),
              PopupMenuItem(
                value: 'import',
                child: ListTile(leading: Icon(Icons.file_download_outlined, color: Colors.orange), title: Text('Importar')),
              ),
            ],
            onSelected: (value) {
              if (value == 'export') {
                _exportPasswords();
              } else if (value == 'import') _importPasswords();
            },
          ),
        ],
      ),
      body: Column(
        children: [
          Container(
            padding: EdgeInsets.all(16.0),
            decoration: BoxDecoration(
              color: _isDarkMode ? Colors.grey[800] : Colors.white,
              borderRadius: BorderRadius.only(
                bottomLeft: Radius.circular(30),
                bottomRight: Radius.circular(30),
              ),
              boxShadow: [
                BoxShadow(
                  color: Colors.black.withOpacity(_isDarkMode ? 0.3 : 0.05),
                  spreadRadius: 2,
                  blurRadius: 10,
                  offset: Offset(0, 4),
                )
              ]
            ),
            child: Column(
              children: [
                TextField(
                  controller: _appController,
                  style: TextStyle(color: _isDarkMode ? Colors.white : Colors.black),
                  decoration: InputDecoration(
                    labelText: 'Nombre de la App o Servicio',
                    labelStyle: TextStyle(color: _isDarkMode ? Colors.grey[300] : Colors.grey[600]),
                    prefixIcon: Icon(Icons.apps_outlined, color: _isDarkMode ? Colors.grey[300] : Colors.grey[600]),
                    filled: true,
                    fillColor: _isDarkMode ? Colors.grey[700] : Colors.grey[100],
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(15),
                      borderSide: BorderSide.none,
                    ),
                  ),
                ),
                SizedBox(height: 10),
                Row(
                  children: [
                    Expanded(
                      child: Column(
                        children: [
                          TextField(
                            controller: _passwordController,
                            focusNode: _passwordFocusNode,
                            obscureText: _isPasswordObscured, // Usa la variable
                            onChanged: (value) => setState(() {}), // Para actualizar el indicador
                            style: TextStyle(color: _isDarkMode ? Colors.white : Colors.black),
                            decoration: InputDecoration(
                              labelText: 'Contraseña',
                              labelStyle: TextStyle(color: _isDarkMode ? Colors.grey[300] : Colors.grey[600]),
                              prefixIcon: Icon(Icons.lock_outline, color: _isDarkMode ? Colors.grey[300] : Colors.grey[600]),
                              // Se añade el icono para mostrar/ocultar
                              suffixIcon: IconButton(
                                icon: Icon(
                                  _isPasswordObscured ? Icons.visibility : Icons.visibility_off,
                                  color: _isDarkMode ? Colors.grey[300] : Colors.grey[600],
                                ),
                                onPressed: () {
                                  setState(() {
                                    _isPasswordObscured = !_isPasswordObscured;
                                  });
                                },
                              ),
                              filled: true,
                              fillColor: _isDarkMode ? Colors.grey[700] : Colors.grey[100],
                              border: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(15),
                                borderSide: BorderSide.none,
                              ),
                            ),
                          ),
                          // Indicador de fortaleza de contraseña
                          if (_passwordController.text.isNotEmpty) ...[
                            SizedBox(height: 8),
                            _buildPasswordStrengthIndicator(_passwordController.text),
                          ],
                        ],
                      ),
                    ),
                    SizedBox(width: 10),
                    IconButton(
                      onPressed: _showPasswordGenerator,
                      icon: Icon(Icons.auto_awesome),
                      tooltip: 'Generar contraseña',
                      style: IconButton.styleFrom(
                        backgroundColor: Colors.blue[50],
                        foregroundColor: Colors.blue[600],
                        padding: EdgeInsets.all(12),
                      ),
                    ),
                  ],
                ),
                SizedBox(height: 15),
                Row(
                  children: [
                    Expanded(
                      child: Container(
                        decoration: BoxDecoration(
                          gradient: LinearGradient(
                            colors: _editingApp == null 
                                ? [Colors.blue[700]!, Colors.lightBlueAccent.shade400]
                                : [Colors.orange.shade600, Colors.orange.shade400],
                            begin: Alignment.topLeft,
                            end: Alignment.bottomRight,
                          ),
                          borderRadius: BorderRadius.circular(15),
                        ),
                        child: ElevatedButton.icon(
                          onPressed: _savePassword,
                          icon: Icon(_editingApp == null ? Icons.save_outlined : Icons.edit_outlined, size: 24, color: Colors.white),
                          label: Text(
                            _editingApp == null ? 'Guardar' : 'Actualizar',
                            style: TextStyle(fontSize: 16, color: Colors.white, fontWeight: FontWeight.bold),
                          ),
                          style: ElevatedButton.styleFrom(
                            backgroundColor: Colors.transparent,
                            shadowColor: Colors.transparent,
                            padding: EdgeInsets.symmetric(vertical: 14),
                            shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
                          ),
                        ),
                      ),
                    ),
                    if (_editingApp != null) ...[
                      SizedBox(width: 10),
                      ElevatedButton.icon(
                        onPressed: _cancelEdit,
                        icon: Icon(Icons.cancel_outlined),
                        label: Text('Cancelar'),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.grey[300],
                          foregroundColor: Colors.black54,
                          padding: EdgeInsets.symmetric(vertical: 14, horizontal: 16),
                          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
                        ),
                      ),
                    ],
                  ],
                ),
              ],
            ),
          ),
          
          if (_passwords.isNotEmpty) ...[
            Padding(
              padding: EdgeInsets.fromLTRB(16.0, 16.0, 16.0, 8.0),
              child: TextField(
                controller: _searchController,
                style: TextStyle(color: _isDarkMode ? Colors.white : Colors.black),
                decoration: InputDecoration(
                  hintText: 'Buscar por nombre...',
                  hintStyle: TextStyle(color: _isDarkMode ? Colors.grey[400] : Colors.grey[600]),
                  prefixIcon: Icon(Icons.search, color: _isDarkMode ? Colors.grey[300] : Colors.grey[600]),
                  suffixIcon: _searchController.text.isNotEmpty
                      ? IconButton(
                          icon: Icon(Icons.clear, color: _isDarkMode ? Colors.grey[300] : Colors.grey[600]),
                          onPressed: () {
                            _searchController.clear();
                            _filterPasswords();
                          },
                        )
                      : null,
                  filled: true,
                  fillColor: _isDarkMode ? Colors.grey[800] : Colors.white,
                  border: OutlineInputBorder(
                    borderRadius: BorderRadius.circular(15),
                    borderSide: BorderSide.none,
                  ),
                ),
              ),
            ),
          ],
          
          Expanded(
            child: _filteredApps.isEmpty
                ? Center(
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Icon(Icons.shield_moon_outlined, size: 100, color: _isDarkMode ? Colors.grey[600] : Colors.grey[400]),
                        SizedBox(height: 20),
                        Text(
                          '¡Bienvenido!',
                          style: GoogleFonts.inter(fontSize: 22, fontWeight: FontWeight.bold, color: _isDarkMode ? Colors.grey[200] : Colors.grey[700]),
                        ),
                        SizedBox(height: 10),
                        Text(
                          'Aún no tienes contraseñas guardadas.\n¡Agrega la primera para empezar a protegerte! 🚀',
                          textAlign: TextAlign.center,
                          style: TextStyle(fontSize: 16, color: _isDarkMode ? Colors.grey[300] : Colors.grey[600]),
                        ),
                      ],
                    ),
                  )
                : ListView.builder(
                    padding: EdgeInsets.all(16.0),
                    itemCount: _filteredApps.length,
                    itemBuilder: (context, index) {
                      String appKey = _filteredApps[index];
                      PasswordEntry entry = _passwords[appKey]!;
                      bool isVisible = _visiblePasswords.contains(appKey);
                      
                      return Card(
                        elevation: 4,
                        shadowColor: Colors.black.withOpacity(_isDarkMode ? 0.3 : 0.1),
                        margin: EdgeInsets.only(bottom: 12),
                        color: _isDarkMode 
                            ? (index.isEven ? Colors.grey[800] : Colors.grey[750])
                            : (index.isEven ? Colors.white : Colors.blue.shade50),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(15.0),
                        ),
                        child: Padding(
                          padding: const EdgeInsets.symmetric(vertical: 8.0),
                          child: ListTile(
                            leading: _getAvatar(entry.app),
                            title: Text(entry.app, style: TextStyle(fontWeight: FontWeight.bold, color: _isDarkMode ? Colors.white : Colors.black)),
                            subtitle: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Row(
                                  children: [
                                    Expanded(
                                      child: AnimatedSwitcher(
                                        duration: const Duration(milliseconds: 300),
                                        transitionBuilder: (child, animation) {
                                          return FadeTransition(opacity: animation, child: child);
                                        },
                                        child: Text(
                                          isVisible ? entry.password : '•' * 10,
                                          key: ValueKey<bool>(isVisible),
                                          style: GoogleFonts.sourceCodePro(
                                            fontSize: 15,
                                            color: isVisible 
                                                ? (_isDarkMode ? Colors.white : Colors.black87)
                                                : (_isDarkMode ? Colors.grey[400] : Colors.grey[600])
                                          ),
                                          overflow: TextOverflow.ellipsis,
                                        ),
                                      ),
                                    ),
                                    IconButton(
                                      icon: Icon(isVisible ? Icons.visibility_off_outlined : Icons.visibility_outlined),
                                      onPressed: () => _togglePasswordVisibility(appKey),
                                      tooltip: isVisible ? 'Ocultar' : 'Mostrar',
                                      iconSize: 20,
                                      color: _isDarkMode ? Colors.grey[300] : Colors.grey[600],
                                    ),
                                    IconButton(
                                      icon: Icon(Icons.copy_outlined),
                                      onPressed: () => _copyPassword(entry.password),
                                      tooltip: 'Copiar',
                                      iconSize: 20,
                                      color: _isDarkMode ? Colors.grey[300] : Colors.grey[600],
                                    ),
                                  ],
                                ),
                                SizedBox(height: 5),
                                Row(
                                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                  children: [
                                    Text(
                                      entry.lastModified != null 
                                          ? 'Mod: ${_formatDate(entry.lastModified!)}'
                                          : 'Creado: ${_formatDate(entry.createdAt)}',
                                      style: TextStyle(fontSize: 12, color: _isDarkMode ? Colors.grey[400] : Colors.grey[500]),
                                    ),
                                    _buildPasswordStrengthIndicator(entry.password),
                                  ],
                                ),
                              ],
                            ),
                            trailing: PopupMenuButton(
                              icon: Icon(Icons.more_horiz),
                              shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(15)),
                              itemBuilder: (context) => [
                                PopupMenuItem(
                                  value: 'edit',
                                  child: ListTile(leading: Icon(Icons.edit_outlined, color: Colors.blue), title: Text('Editar')),
                                ),
                                PopupMenuItem(
                                  value: 'delete',
                                  child: ListTile(leading: Icon(Icons.delete_outline, color: Colors.red), title: Text('Eliminar')),
                                ),
                              ],
                              onSelected: (value) {
                                if (value == 'edit') {
                                  _editPassword(appKey);
                                } else if (value == 'delete') {
                                  _deletePassword(appKey);
                                }
                              },
                            ),
                          ),
                        ),
                      );
                    },
                  ),
          ),
        ],
      ),
      ),
    );
  }
}